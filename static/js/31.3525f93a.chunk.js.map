{"version":3,"sources":["core/config/layout.ts","admin/components/AdminAppBar.tsx","admin/components/AdminToolbar.tsx","utils.ts","analysis/components/UploadButton.tsx","analysis/components/ModelList.tsx","analysis/components/PredictForm.tsx","analysis/components/ModelDialog.tsx","analysis/pages/Analysis.tsx"],"names":["drawerCollapsedWidth","drawerWidth","AdminAppBar","children","useSettings","collapsed","direction","width","fixAppbar","left","right","color","position","sx","lg","marginInlineStart","AdminToolbar","title","toggleDrawer","px","xs","sm","aria-label","edge","onClick","display","marginInlineEnd","variant","component","flexGrow","fileToBase64","file","Promise","resolve","reject","reader","FileReader","addEventListener","e","String","result","readAsDataURL","UploadButton","props","inputRef","useRef","uploadFile","useCallback","current","click","OnFileUploaded","a","currentTarget","files","fileNameFormatter","name","split","base64Body","onUploaded","htmlFor","Input","type","ref","accept","multiple","onChange","Button","size","Add","styled","input","ModelList","selectedModel","onSelect","models","onAddNewModel","theme","useTheme","t","useTranslation","Card","minHeight","CardHeader","CardContent","List","height","overflowY","length","map","model","index","ListItem","disableGutters","ListItemSecondaryAction","IconButton","CheckBoxOutlined","CheckBoxOutlineBlank","ListItemText","mx","primary","primaryTypographyProps","fontWeight","typography","fontWeightMedium","secondary","Box","justifyContent","alignItems","CardActions","PredictForm","formik","useFormik","initialValues","text","stopWords","columnName","onSubmit","Grid","container","spacing","item","md","TextField","margin","required","fullWidth","multiline","rows","maxRows","label","value","values","handleChange","error","touched","Boolean","errors","helperText","ModelDialog","open","onClose","fileName","method","numTopics","Dialog","aria-labelledby","handleSubmit","noValidate","DialogTitle","id","DialogContent","disabled","FormControl","InputLabel","Select","autoFocus","labelId","MenuItem","DialogActions","FileChip","Chip","Analysis","useState","undefined","fileOutput","setFileOutput","setSelectedModel","openAddModelDialog","setOpenAddModelDialog","Fragment","dir","onDelete","Date","now","fileData"],"mappings":"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","file":"static/js/31.3525f93a.chunk.js","sourcesContent":["export const drawerCollapsedWidth = 104;\r\nexport const drawerWidth = 280;\r\n","import {AppBar} from \"@mui/material\";\r\nimport {drawerCollapsedWidth, drawerWidth} from \"../../core/config/layout\";\r\nimport {useSettings} from \"../../core/contexts/SettingsProvider\";\r\nimport {ReactNode} from \"react\";\r\n\r\ntype AdminAppBarProps = {\r\n    children: ReactNode;\r\n};\r\n\r\nconst AdminAppBar = ({children}: AdminAppBarProps) => {\r\n    const {collapsed,direction} = useSettings();\r\n    const width = collapsed ? drawerCollapsedWidth : drawerWidth;\r\n    const fixAppbar = direction === \"rtl\" ? {\r\n        left: 0,\r\n        right: \"auto\"\r\n    } as const : {}\r\n    return (\r\n        <AppBar\r\n            color=\"default\"\r\n            position=\"fixed\"\r\n            sx={[\r\n                {\r\n                    width: {lg: `calc(100% - ${width}px)`},\r\n                    marginInlineStart: {lg: width},\r\n\r\n                },\r\n                fixAppbar\r\n            ]}\r\n        >\r\n            {children}\r\n        </AppBar>\r\n    );\r\n};\r\n\r\nexport default AdminAppBar;\r\n","import IconButton from \"@mui/material/IconButton\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\nimport {useSettings} from \"../../core/contexts/SettingsProvider\";\r\nimport React from \"react\";\r\n\r\ntype AdminToolbarProps = {\r\n    children?: React.ReactNode;\r\n    title?: string;\r\n};\r\n\r\nconst AdminToolbar = ({children, title}: AdminToolbarProps) => {\r\n    const {toggleDrawer} = useSettings();\r\n\r\n    return (\r\n        <Toolbar sx={[\r\n            {\r\n                px: {\r\n                    xs: 3, sm: 6,\r\n                },\r\n            },\r\n        ]}>\r\n            <IconButton\r\n                color=\"inherit\"\r\n                aria-label=\"open drawer\"\r\n                edge=\"start\"\r\n                onClick={toggleDrawer}\r\n                sx={{\r\n                    display: {lg: \"none\"},\r\n                    marginInlineEnd: 2,\r\n                }}\r\n            >\r\n                <MenuIcon/>\r\n            </IconButton>\r\n            <Typography variant=\"h2\" component=\"h1\" sx={{flexGrow: 1}}>\r\n                {title}\r\n            </Typography>\r\n            {children}\r\n        </Toolbar>\r\n    );\r\n};\r\n\r\nexport default AdminToolbar;\r\n","export const fileToBase64 = (file: File): Promise<string> => {\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.addEventListener(\"load\", (e) => {\r\n            resolve(String(reader.result))\r\n        }, false);\r\n\r\n        reader.readAsDataURL(file);\r\n    })\r\n\r\n}","import {Button} from \"@mui/material\";\r\nimport styled from \"@emotion/styled\";\r\nimport React, {useCallback, useRef} from \"react\";\r\nimport {fileToBase64} from \"../../utils\";\r\nimport {Add} from \"@mui/icons-material\";\r\n\r\n\r\nexport interface FileOutput {\r\n    name: string\r\n    base64Body: string\r\n}\r\n\r\ninterface PropTypes {\r\n    title: string,\r\n    onUploaded: (output: FileOutput) => void,\r\n    fileNameFormatter?: (fileName: string) => string,\r\n}\r\n\r\n\r\nexport const UploadButton = (props: PropTypes): JSX.Element => {\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n\r\n    const uploadFile = useCallback(() => {\r\n        if (inputRef.current) {\r\n            inputRef.current.click()\r\n        }\r\n    }, [inputRef])\r\n\r\n    const OnFileUploaded = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.files) {\r\n            const file = e.currentTarget.files[0]\r\n\r\n            props.onUploaded({\r\n                name: props.fileNameFormatter ? props.fileNameFormatter(file.name) : file.name,\r\n                base64Body: (await fileToBase64(file)).split(\",\")[1] || \"\"\r\n            })\r\n        }\r\n    }\r\n\r\n    return <label htmlFor=\"contained-button-file\">\r\n        <Input type=\"file\" ref={inputRef} accept=\".txt\" multiple={false} onChange={(e) => OnFileUploaded(e)}/>\r\n        <Button\r\n            aria-label=\"add file\"\r\n            color=\"primary\"\r\n            variant={\"contained\"}\r\n            size=\"medium\"\r\n            onClick={uploadFile}\r\n        >\r\n            {props.title} <Add/>\r\n        </Button>\r\n    </label>\r\n}\r\n\r\n\r\nconst Input = styled.input`\r\n  display: none;\r\n`","import CardHeader from \"@mui/material/CardHeader\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport List from \"@mui/material/List\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListItemSecondaryAction from \"@mui/material/ListItemSecondaryAction\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Card from \"@mui/material/Card\";\r\nimport {Add, CheckBoxOutlineBlank, CheckBoxOutlined} from '@mui/icons-material';\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport {useTheme} from \"@mui/material/styles\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {Box, Button, CardActions} from \"@mui/material\";\r\n\r\n\r\ninterface Model {\r\n    name: string\r\n}\r\n\r\ninterface PropTypes {\r\n    models: Model[],\r\n    selectedModel: number | undefined\r\n    onSelect: (index: number) => void,\r\n    onAddNewModel: () => void\r\n}\r\n\r\n\r\nexport const ModelList = (\r\n    {\r\n        selectedModel,\r\n        onSelect,\r\n        models,\r\n        onAddNewModel\r\n    }\r\n        : PropTypes): JSX.Element => {\r\n    const theme = useTheme();\r\n    const {t} = useTranslation();\r\n\r\n    return <Card sx={{minHeight: \"100%\"}}>\r\n        <CardHeader title={t(\"analysis.modelList.title\")}/>\r\n        <CardContent>\r\n            <List sx={{height: 360, overflowY: \"scroll\"}}>\r\n                {\r\n                    models.length ? models.map((model: Model, index) => (\r\n                            <ListItem disableGutters key={index}>\r\n                                <ListItemSecondaryAction>\r\n                                    <IconButton\r\n                                        onClick={() => onSelect(index)}\r\n                                        aria-label=\"Select model\"\r\n                                        color={\"primary\"}\r\n                                        edge=\"start\">\r\n                                        {selectedModel === index ? <CheckBoxOutlined/> : <CheckBoxOutlineBlank/>}\r\n                                    </IconButton>\r\n                                </ListItemSecondaryAction>\r\n                                <ListItemText\r\n                                    sx={{\r\n                                        mx: 4\r\n                                    }}\r\n                                    primary={t(\"analysis.modelList.modelName\")}\r\n                                    primaryTypographyProps={{\r\n                                        fontWeight: theme.typography.fontWeightMedium,\r\n                                    }}\r\n                                    secondary={model.name}\r\n                                />\r\n\r\n                            </ListItem>\r\n                        ))\r\n                        :\r\n                        <Box sx={{\r\n                            display: \"inline-flex\",\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            justifyContent: \"center\",\r\n                            alignItems: \"center\"\r\n                        }}>\r\n                            {t(\"No models defined yet!\")}\r\n                        </Box>\r\n                }\r\n            </List>\r\n        </CardContent>\r\n        <CardActions>\r\n            <Box sx={{display: \"inline-flex\", justifyContent: \"start\"}}>\r\n                <Button size=\"small\" variant=\"outlined\" color=\"primary\" onClick={() => onAddNewModel()}>\r\n                    <Add/> {t(\"analysis.modelList.newModel\")}\r\n                </Button>\r\n            </Box>\r\n        </CardActions>\r\n    </Card>\r\n}\r\n\r\n","import CardHeader from \"@mui/material/CardHeader\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport {Box, Button, CardActions, Grid} from \"@mui/material\";\r\nimport Card from \"@mui/material/Card\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {useFormik} from \"formik\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport React from \"react\";\r\n\r\ninterface PropTypes {\r\n\r\n}\r\n\r\n\r\nexport const PredictForm = (props: PropTypes): JSX.Element => {\r\n    const {t} = useTranslation();\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            text: \"\",\r\n            stopWords: \"persianST\",\r\n            columnName: \"Text\",\r\n        },\r\n        onSubmit: () => {\r\n        },\r\n    });\r\n    return <Card >\r\n        <CardHeader title={t(\"analysis.predict.title\")}/>\r\n        <CardContent>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={12} md={12}><TextField\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    multiline\r\n                    rows={9}\r\n                    maxRows={9}\r\n                    label={t<string>(\"analysis.predict.form.text\")}\r\n                    name=\"text\"\r\n                    value={formik.values.text}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.text && Boolean(formik.errors.text)}\r\n                    helperText={formik.touched.text && formik.errors.text}\r\n                /></Grid>\r\n                <Grid item xs={12} md={6}><TextField\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    label={t<string>(\"analysis.predict.form.stopWords\")}\r\n                    name=\"stopWords\"\r\n                    value={formik.values.stopWords}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.stopWords && Boolean(formik.errors.stopWords)}\r\n                    helperText={formik.touched.stopWords && formik.errors.stopWords}\r\n                /></Grid>\r\n                <Grid item xs={12} md={6}><TextField\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    label={t<string>(\"analysis.predict.form.columnName\")}\r\n                    name=\"columnName\"\r\n                    value={formik.values.columnName}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.columnName && Boolean(formik.errors.columnName)}\r\n                    helperText={formik.touched.columnName && formik.errors.columnName}\r\n                /></Grid>\r\n            </Grid>\r\n        </CardContent>\r\n        <CardActions>\r\n            <Box sx={{display: \"inline-flex\", justifyContent: \"start\"}}>\r\n                <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={() => {\r\n                }}>\r\n                    {t(\"analysis.predict.form.confirm\")}\r\n                </Button>\r\n            </Box>\r\n        </CardActions>\r\n    </Card>\r\n}","import Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport {useFormik} from \"formik\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {FormControl, Grid, InputLabel, MenuItem, Select} from \"@mui/material\";\r\nimport React from \"react\";\r\n\r\ninterface PropTypes {\r\n    open: boolean\r\n    onClose: () => void\r\n    fileName: string\r\n};\r\n\r\nconst ModelDialog = (\r\n    {\r\n        open, onClose, fileName\r\n    }: PropTypes) => {\r\n    const {t} = useTranslation();\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fileName,\r\n            method: \"nfm\",\r\n            stopWords: \"persianST\",\r\n            columnName: \"Text\",\r\n            numTopics: 5\r\n        },\r\n        onSubmit: () => {\r\n        },\r\n    });\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} aria-labelledby=\"event-dialog-title\">\r\n            <form onSubmit={formik.handleSubmit} noValidate>\r\n                <DialogTitle id=\"event-dialog-title\">\r\n                    {t<string>(\"analysis.modelDialog.title\")}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} md={12}><TextField\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            label={t<string>(\"analysis.modelDialog.form.filename\")}\r\n                            name=\"filename\"\r\n                            disabled={true}\r\n                            value={formik.values.fileName}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.fileName && Boolean(formik.errors.fileName)}\r\n                            helperText={formik.touched.fileName && formik.errors.fileName}\r\n                        /></Grid>\r\n                        <Grid item xs={12} md={12}><FormControl fullWidth>\r\n                            <InputLabel id=\"method-selector\">{t<string>(\"analysis.modelDialog.form.method\")}</InputLabel>\r\n                            <Select\r\n                                autoFocus\r\n                                required\r\n                                labelId=\"method-selector\"\r\n                                name='method'\r\n                                value={formik.values.method}\r\n                                label={t<string>(\"analysis.modelDialog.form.method\")}\r\n                                onChange={formik.handleChange}\r\n                            >\r\n                                <MenuItem value={\"nfm\"}>NFM</MenuItem>\r\n                                <MenuItem value={\"lda\"}>LDA</MenuItem>\r\n                            </Select>\r\n                        </FormControl></Grid>\r\n                        <Grid item xs={12} md={12}><TextField\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            label={t<string>(\"analysis.modelDialog.form.stopWords\")}\r\n                            name=\"stopWords\"\r\n                            value={formik.values.stopWords}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.stopWords && Boolean(formik.errors.stopWords)}\r\n                            helperText={formik.touched.stopWords && formik.errors.stopWords}\r\n                        /></Grid>\r\n                        <Grid item xs={12} md={6}><TextField\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            label={t<string>(\"analysis.modelDialog.form.columnName\")}\r\n                            name=\"columnName\"\r\n                            value={formik.values.columnName}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.columnName && Boolean(formik.errors.columnName)}\r\n                            helperText={formik.touched.columnName && formik.errors.columnName}\r\n                        /></Grid>\r\n                        <Grid item xs={12} md={6}><TextField\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            label={t<string>(\"analysis.modelDialog.form.numTopics\")}\r\n                            name=\"numTopics\"\r\n                            type={\"number\"}\r\n                            value={formik.values.numTopics}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.numTopics && Boolean(formik.errors.numTopics)}\r\n                            helperText={formik.touched.numTopics && formik.errors.numTopics}\r\n                        /></Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Box sx={{flexGrow: 1}}/>\r\n                    <Button onClick={onClose}>{t(\"analysis.modelDialog.form.cancel\")}</Button>\r\n                    <Button onClick={onClose} variant={'contained'}>{t(\"analysis.modelDialog.form.confirm\")}</Button>\r\n                </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default ModelDialog;\r\n","import React, {useState} from \"react\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport AdminAppBar from \"../../admin/components/AdminAppBar\";\r\nimport AdminToolbar from \"../../admin/components/AdminToolbar\";\r\nimport {FileOutput, UploadButton} from \"../components/UploadButton\";\r\nimport {Chip, Grid} from \"@mui/material\";\r\nimport {ModelList} from \"../components/ModelList\";\r\nimport {PredictForm} from \"../components/PredictForm\";\r\nimport ModelDialog from \"../components/ModelDialog\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst models = [\r\n    \"test.txt - 1235125351261263_time_2022_3_5_15_57_fbdb838b-06ba-47b6-968e-24\",\r\n    \"test.txt - 1235125124261263_time_2022_3_5_15_57_fbdb838b-06ba-47b6-968e-336c124b8a411d6\",\r\n    \"test.txt - 1235125312451261263_time_2022_3_5_15_57_fbdb838b-06ba-47b6-968e-336cb41248a411d6\",\r\n    \"test.txt - 12351253511261263_time_2022_3_5_15_57_fbdb838b-06ba-47b6-968e-336cb8a411d6\",\r\n    \"test.txt - 1235125311241261263_time_2022_3_5_15_57_fbdb838b-06ba-47b6-968e-336cb8124411d6\"\r\n]\r\n\r\n\r\nconst Analysis = () => {\r\n        const {t} = useTranslation();\r\n        const [fileOutput, setFileOutput] = useState<FileOutput | undefined>(undefined)\r\n        const [selectedModel, setSelectedModel] = useState<number | undefined>(undefined)\r\n        const [openAddModelDialog, setOpenAddModelDialog] = useState<boolean>(false)\r\n\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <AdminAppBar>\r\n                    <AdminToolbar title={t(\"analysis.title\")}>\r\n                        {\r\n                            fileOutput ?\r\n                                <FileChip dir={'ltr'} label={fileOutput.name} onDelete={() => setFileOutput(undefined)}\r\n                                          size={\"medium\"}\r\n                                          variant={'filled'}\r\n                                          color={\"primary\"}/> :\r\n                                <UploadButton title={t(\"analysis.button.title\")}\r\n                                              fileNameFormatter={(name) => `${Date.now()}-${name}`}\r\n                                              onUploaded={(fileData) => {\r\n                                                  setFileOutput(fileData)\r\n                                              }}/>\r\n                        }\r\n                    </AdminToolbar>\r\n                </AdminAppBar>\r\n\r\n                {\r\n                    fileOutput ? <>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} md={6}>\r\n                                <ModelList onAddNewModel={() => setOpenAddModelDialog(true)}\r\n                                           selectedModel={selectedModel}\r\n                                           onSelect={(index) => setSelectedModel(index)}\r\n                                           models={models.map(item => ({name: item}))}/>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <PredictForm/>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {\r\n                            openAddModelDialog &&\r\n                            <ModelDialog fileName={fileOutput.name} open={openAddModelDialog}\r\n                                         onClose={() => setOpenAddModelDialog(false)}/>\r\n                        }\r\n                    </> : <>{t(\"analysis.initialPlaceHolder\")}</>\r\n                }\r\n            </React.Fragment>\r\n        );\r\n    }\r\n;\r\n\r\n\r\nconst FileChip = styled(Chip)`\r\n  padding: 10px;\r\n`\r\n\r\nexport default Analysis;\r\n"],"sourceRoot":""}